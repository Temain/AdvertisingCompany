@using AdvertisingCompany.Domain.Models
@model AdvertisingCompany.Web.Areas.Admin.Models.CreateAddressViewModel
@{
    ViewBag.Title = "Создание нового рекламного объекта";
}

<a href="@Url.Action("Index", "Address", new { area = "Admin" })">
    <span class="glyphicon glyphicon-circle-arrow-left back-link"></span>
</a>

<h1 class="page-title">
    @ViewBag.Title
</h1>

<div class="row">
    <div class="col-md-12">
        <section class="widget">
            <header>               
                @*<h4>
                    Table <span class="fw-semi-bold">Styles</span>
                </h4>*@
                <div class="widget-controls">
                    @*<a href="#"><i class="glyphicon glyphicon-cog"></i></a>
                        <a data-widgster="close" href="#"><i class="glyphicon glyphicon-remove"></i></a>*@
                </div>
            </header>
            <div class="widget-body">
                @using (Html.BeginForm("Create", "Address", new { area = "Admin" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()

                    <fieldset>
                        <div class="form-group required-legend col-md-12">
                            Символом <span class="glyph">*</span> отмечены поля, обязательные для заполнения.
                        </div>

                        @Html.ValidationSummary("", new { @class = "text-danger" })
                        <div class="form-group required">
                            @Html.LabelFor(m => m.CityId, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.CityId, (SelectList)ViewBag.Cities, String.Empty, new { @id = "cityId", @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group required">
                            @Html.LabelFor(m => m.AreaId, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.AreaId, (SelectList)new SelectList(new List<Area>()), new { @id = "areaId", @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group required">
                            @Html.LabelFor(m => m.StreetId, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <input type="text" id="streetName" data-provide="typeahead" placeholder="" autocomplete="off" value="" class="form-control" />
                                @Html.HiddenFor(model => model.StreetId, new { @id = "streetId" })
                                @Html.ValidationMessageFor(a => a.StreetId)
                                <div class="text-danger msg-text">Улица не найдена</div>
                            </div>
                        </div>
                        <div class="form-group required">
                            @Html.LabelFor(m => m.HouseNumber, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.HouseNumber, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.BuildingNumber, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.BuildingNumber, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group required">
                            @Html.LabelFor(m => m.PorchNumber, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.PorchNumber, new { @class = "form-control" })
                            </div>
                        </div>
                    </fieldset>

                    <div class="form-actions">
                        <div class="row">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" class="btn btn-primary">
                                    <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Сохранить
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </section>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/typeahead")

    <script>
        $(function() {

            // загрузка микрорайонов города
            $('#cityId').on('change', function() {
                var cityId = $(this).val();

                $.post('/Address/GetAreas', { cityId: cityId }, function (areas) {
                    $('#areaId').html('');

                    $.each(areas, function(index, area) {
                        var option = "<option value='" + area.AreaId + "'>" + area.AreaName + '</option>';
                        $('#areaId').append(option);
                    });
                });
            });

            // Поиск улицы
            var mapStreet = {};
            var streetName = $('#streetName');

            var streetNameText = $('#streetName').val();
            if (streetNameText == null || streetNameText == "") {
                streetName.siblings('.msg-text').slideUp(0);
                $('#streetId').val('0');
            }
            streetName.typeahead({
                source: function(query, process) {
                    var streets = [];
                    var cityId = $('#cityId').val();
                    if (query.length > 2) {
                        // This is going to make an HTTP post request to the controller
                        return $.post('/Address/StreetLookup', { query: query, cityId: cityId }, function(data) {
                            mapStreet = {};

                            // Loop through and push to the array
                            $.each(data, function(i, street) {
                                mapStreet[street.StreetName] = street;
                                streets.push(street.StreetName);
                            });
                            var len = Object.keys(mapStreet).length;
                            if (len === 0) {
                                streetName.siblings('.msg-text').slideDown(250);
                                $('#streetId').val("-1");
                            } else {
                                streetName.siblings('.msg-text').slideUp(250);
                            }

                            // Process the details
                            process(streets);
                        });
                    }
                    if (query.length === 0) streetName.siblings('.msg-text').slideUp(250);
                },
                items: 20,
                //scrollHeight: function () { return $("#streetName").scrollTop(); },
                updater:
                    function(item) {
                        var selectedShortCode = mapStreet[item];

                        // Set the text to our selected id
                        $('#StreetId').val('' + selectedShortCode.StreetId);
                        $('#StreetStreetId').val('' + selectedShortCode.StreetId);
                        var postalCode = selectedShortCode.StreetINDEX;
                        if (postalCode != null) {
                            $('#PostalCode').val('' + selectedShortCode.StreetINDEX);
                        } else {
                            $('#PostalCode').val('');
                        }
                        return item;
                    },
                matcher: function(item) {
                    if (item.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
                        var street = mapStreet[item];

                        // Set the text to our selected id
                        $('#streetId').val('' + street.StreetId);

                        return item;
                    }
                    $('#streetId').val('-1');
                    return query;

                },
                sorter: function(items) {
                    return items.sort();
                },
                highlighter: function(item) {
                    var regex = new RegExp('(' + this.query + ')', 'gi');
                    return item.replace(regex, '<strong>$1</strong>');
                }
            });

            streetName.on('input', function() {
                var street = $('#streetName').val();
                if (street == null || street === '') {
                    streetName.siblings('.msg-text').slideUp(250);
                    $('#streetId').val('0');
                }
            });

        });
    </script>
}




